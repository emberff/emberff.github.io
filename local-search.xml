<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>分布式锁工具类</title>
    <link href="/2024/10/17/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2024/10/17/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>在<a href="https://github.com/zongzibinbin/MallChat">MallChat</a> 项目过程中学习到的对于分布式锁工具类的抽离</p>          </div><h1 id="Redisson-分布式锁的使用"><a href="#Redisson-分布式锁的使用" class="headerlink" title="Redisson 分布式锁的使用"></a>Redisson 分布式锁的使用</h1><p>按照下面的形式使用:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 尝试加锁，最多等待100秒，上锁以后10秒自动解锁</span><br>boolean res = <span class="hljs-keyword">lock</span>.tryLock(<span class="hljs-number">100</span>, <span class="hljs-number">10</span>, TimeUnit.SECONDS);<br>        RLock <span class="hljs-keyword">lock</span> = redissonClient.getLock(<span class="hljs-string">&quot;myLock&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">lock</span>.tryLock(<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, TimeUnit.SECONDS)) &#123;<br>                <span class="hljs-comment">// 业务逻辑</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">lock</span>.unlock();<br>        &#125;<br></code></pre></td></tr></table></figure><p>可以看到, 除了业务代码以及获取锁时参数的设定, 其他地方都是固定的格式<br>执行的流程都是先获取锁, 然后执行业务, 最后解锁。因此在编写工具类时, 需要传递的参数内容有 </p><ul><li><code>getLock</code> 方法需要的锁的键名 </li><li><code>tryLock()</code> 方法中需要的参数 <code>time</code>、<code>timeUtil</code></li><li>&#96;业务的执行代码<br><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410171456421.png" alt="tryLock() 方法的参数"></li></ul><h1 id="分布式锁工具类的编写"><a href="#分布式锁工具类的编写" class="headerlink" title="分布式锁工具类的编写"></a>分布式锁工具类的编写</h1><p>对于传递的业务代码, 可以使用 <code>Supplier&lt;T&gt;</code> , <code>Supplier&lt;T&gt;</code> 是一个函数式接口，它的 <code>get()</code> 方法没有任何参数，并且返回一个类型为 <code>T</code> 的对象。<br>以下为几种函数式接口的区别:</p><table><thead><tr><th>接口名称</th><th>输入参数类型</th><th>返回值类型</th><th>主要方法</th><th>用途</th></tr></thead><tbody><tr><td>Consumer<T></td><td>T</td><td>void</td><td>void accept(T t)</td><td>接收一个参数，执行操作，无返回值</td></tr><tr><td>Function&lt;T, R&gt;</td><td>T</td><td>R</td><td>R apply(T t)</td><td>接收一个参数，返回一个结果</td></tr><tr><td>Runnable</td><td>无</td><td>void</td><td>void run()</td><td>不接受参数，执行操作，无返回值</td></tr><tr><td>Supplier<T></td><td>无</td><td>T</td><td>T get()</td><td>不接受参数，返回一个结果</td></tr></tbody></table><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LockService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedissonClient redissonClient;<br><br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">executeWithLock</span><span class="hljs-params">(String key, <span class="hljs-keyword">int</span> waitTime, TimeUnit timeUnit, Supplier&lt;T&gt; supplier)</span> </span>&#123;<span class="hljs-comment">//Supplier: 无入参,</span><br>        RLock lock = redissonClient.getLock(key);<br>        <span class="hljs-keyword">boolean</span> success = lock.tryLock(waitTime, timeUnit);<br>        <span class="hljs-comment">// 抛出获取锁太频繁的异常</span><br>        <span class="hljs-keyword">if</span> (!success)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BusinessException(CommonErrorEnum.LOCK_LIMIT);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">return</span> supplier.<span class="hljs-title">get</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">// 此处执行业务</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对 <code>executeWithLock</code> 方法进行<strong>重载</strong>, 编写一个 <code>waitTime</code> 以及 <code>timeUnit</code> 为默认的方法:</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">executeWithLock</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">key</span>, Supplier&lt;T&gt; supplier)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">executeWithLock</span>(<span class="hljs-built_in">key</span>, <span class="hljs-number">-1</span>, TimeUnit.<span class="hljs-property">MILLISECONDS</span>, supplier);<br>&#125;<br></code></pre></td></tr></table></figure><p>这样 <code>LockService</code> 的工具类就封装好了, 使用Lambda表达式传递业务代码:</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">lockService.executeWithLock(key, <span class="hljs-number">10</span>, TimeUnit.SECONDS, <span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>&#123;<br>            <span class="hljs-regexp">//</span> 执行业务逻辑<br>            ...<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><p>如果不需要排队等锁，还能重载方法减少两个参数:</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">lockService.executeWithLock(key, <span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>&#123;<br>            <span class="hljs-regexp">//</span>执行业务逻辑<br>            。。。。。<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="注解实现分布式锁"><a href="#注解实现分布式锁" class="headerlink" title="注解实现分布式锁"></a>注解实现分布式锁</h1><h2 id="编写自定义注解类"><a href="#编写自定义注解类" class="headerlink" title="编写自定义注解类"></a>编写自定义注解类</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs csharp">@Retention(RetentionPolicy.RUNTIME) <span class="hljs-comment">// 指定注解保留到运行时</span><br>@Target(ElementType.METHOD) <span class="hljs-comment">// 指定注解作用于方法上</span><br><span class="hljs-keyword">public</span> @interface RedissonLock &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * key的前缀, 默认去方法全限定名, 可以自己指定</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">String <span class="hljs-title">prefixKey</span>() <span class="hljs-literal">default</span> &quot;&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支持SpringEl表达式的Key (即可输入字符串, 也可使用参数名 #value)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">String <span class="hljs-title">key</span>()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 等待锁的排队时间, 默认快速失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">waiteTime</span>() <span class="hljs-literal">default</span> -1</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 等待时间单位, 默认毫秒</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">TimeUnit <span class="hljs-title">unit</span>() <span class="hljs-literal">default</span> TimeUnit.MILLISECONDS</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="处理自定义注解"><a href="#处理自定义注解" class="headerlink" title="处理自定义注解"></a>处理自定义注解</h2><p>需要注意的地方有两点</p><ul><li>在使用分布式锁时, 如果与事务一起执行, 要确保锁在事务外</li><li>需要实现el表达式组装key</li></ul><p>编写一个 <code>SpElUtils</code> 工具类:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringElUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> ExpressionParser PARSER = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SpelExpressionParser</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> DefaultParameterNameDiscoverer PARAMETER_NAME_DISCOVERER = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DefaultParameterNameDiscoverer</span>();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">String</span> <span class="hljs-title">getMethodKey</span><span class="hljs-params">(Method method)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> method.<span class="hljs-built_in">getDeclaringClass</span>() + <span class="hljs-string">&quot;#&quot;</span> + method.<span class="hljs-built_in">getName</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">String</span> <span class="hljs-title">parseSpEl</span><span class="hljs-params">(Method method, Object[] args, <span class="hljs-type">String</span> key)</span> </span>&#123;<br>        <span class="hljs-type">String</span>[] params = Optional.<span class="hljs-built_in">ofNullable</span>(PARAMETER_NAME_DISCOVERER.<span class="hljs-built_in">getParameterNames</span>(method)).<span class="hljs-built_in">orElse</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">String</span>[]&#123;&#125;);<br>        EvaluationContext context = <span class="hljs-keyword">new</span> <span class="hljs-built_in">StandardEvaluationContext</span>();<span class="hljs-comment">//el解析需要的上下文对象</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; params.length; i++) &#123;<br>            context.<span class="hljs-built_in">setVariable</span>(params[i], args[i]);<span class="hljs-comment">//所有参数都作为原材料扔进去</span><br>        &#125;<br>        Expression expression = PARSER.<span class="hljs-built_in">parseExpression</span>(key);<br>        <span class="hljs-keyword">return</span> expression.<span class="hljs-built_in">getValue</span>(context, <span class="hljs-type">String</span>.<span class="hljs-keyword">class</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于自定义注解的优先级, 参考<a href="https://juejin.cn/post/7133207925593489439#heading-1">博客</a><br>编写切面类:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-variable">@Component</span><br><span class="hljs-variable">@Aspect</span><br><span class="hljs-variable">@Order</span>(<span class="hljs-number">0</span>)// 确保比事务注解先执行, 分布式锁在事务外<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedissonLockAspect</span> </span>&#123;<br>    <span class="hljs-variable">@Autowired</span><br>    private LockService lockService;<br><br>    <span class="hljs-variable">@Around</span>(<span class="hljs-string">&quot;<span class="hljs-variable">@annotation</span>(redissonLock)&quot;</span>)<br>    public Object around(ProceedingJoinPoint joinPoint, RedissonLock redissonLock) throws Throwable&#123;<br>        <span class="hljs-regexp">//</span> 获取方法名<br>        Method <span class="hljs-function"><span class="hljs-keyword">method</span> =</span> ((MethodSignature) joinPoint.getSignature()).getMethod();<br>        String prefix = StringUtils.isBlank(redissonLock.prefixKey())<br>                ? SpringElUtils.getMethodKey(<span class="hljs-function"><span class="hljs-keyword">method</span>)<span class="hljs-attr"></span></span><br><span class="hljs-attr"><span class="hljs-function">                : redissonLock</span>.<span class="hljs-title">prefixKey</span></span>();<br>        // 使用SpElUtils工具类获取参数<br>        String key = SpringElUtils.parseSpEl(<span class="hljs-function"><span class="hljs-keyword">method</span>, <span class="hljs-title">joinPoint</span>.<span class="hljs-title">getArgs</span></span>(), redissonLock.key());<br>        <span class="hljs-keyword">return</span> lockService.executeWithLock(prefix + <span class="hljs-string">&quot;:&quot;</span> + key, redissonLock.waiteTime(), redissonLock.unit(), joinPoint::proceed);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用注解:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-meta">@RedissonLock(key = &quot;#uid&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">modifyName</span><span class="hljs-params">(Long uid, String name)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">valid</span> <span class="hljs-operator">=</span> userDao.getByName(name);<br>    AssertUtil.isEmpty(valid, <span class="hljs-string">&quot;名字已被抢占, 请换一个&quot;</span>);<br>    <span class="hljs-type">UserBackpack</span> <span class="hljs-variable">modifyNameItem</span> <span class="hljs-operator">=</span> userBackpackDao.getFirstValidItem(uid, ItemEnum.MODIFY_NAME_CARD.getId());<br>    AssertUtil.isNotEmpty(modifyNameItem, <span class="hljs-string">&quot;改名卡不够了! &quot;</span>);<br>    <span class="hljs-comment">// 使用改名卡</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> userBackpackDao.useItem(modifyNameItem);<br>    <span class="hljs-keyword">if</span> (success) &#123;<br>        <span class="hljs-comment">//改名</span><br>        userDao.modifyName(uid, name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口:"></a>测试接口:</h2><p><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410171622605.png" alt="切面类获取参数"><br><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410171621757.png" alt="分布式锁添加"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/zongzibinbin/MallChat">Mallchat项目</a><br><a href="https://juejin.cn/post/7133207925593489439#heading-1">@Transactional和普通自定义切面执行顺序的思考</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot异常捕获</title>
    <link href="/2024/10/15/SpringBoot%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/"/>
    <url>/2024/10/15/SpringBoot%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>记录一下在学习 <a href="https://github.com/zongzibinbin/MallChat">MallChat</a> 项目过程中学习到的几种异常捕获</p>          </div><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>众所周知，默认情况下，<code>ThreadPoolTaskExecutor</code> 中的线程在执行过程中如果出现未捕获的异常，异常信息不会自动输出到日志中，这会使得排查错误变得困难。为了增强对线程池中未捕获异常的处理，可以通过实现 <code>Thread.UncaughtExceptionHandler</code> 来捕获异常，并将异常日志记录下来</p><h2 id="实现自定义异常处理器"><a href="#实现自定义异常处理器" class="headerlink" title="实现自定义异常处理器"></a>实现自定义异常处理器</h2><p>自定义一个 <code>UncaughtExceptionHandler</code>，用于捕获并记录线程中的未捕获的异常:</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Slf</span>4j<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyUncaughtExceptionHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Thread</span>.<span class="hljs-title">UncaughtExceptionHandler</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">uncaughtException</span><span class="hljs-params">(Thread t, Throwable e)</span> </span>&#123;<br>      log.<span class="hljs-keyword">error</span>(<span class="hljs-string">&quot;Exception in thread&quot;</span> , e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建自定义的-ThreadFactory"><a href="#创建自定义的-ThreadFactory" class="headerlink" title="创建自定义的 ThreadFactory"></a>创建自定义的 <code>ThreadFactory</code></h2><p>在自定义的 <code>ThreadFactory</code> 中，将该异常处理机制应用到每个线程上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThreadFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ThreadFactory</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">MyUncaughtExceptionHandler</span> <span class="hljs-variable">MY_UNCAUGHT_EXCEPTION_HANDLER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyUncaughtExceptionHandler</span>();<br>    <span class="hljs-keyword">private</span> ThreadFactory original;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">newThread</span><span class="hljs-params">(Runnable r)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> original.newThread(r);<span class="hljs-comment">// 执行spring线程自己的创建逻辑</span><br>        <span class="hljs-comment">// 额外装饰需要的创建逻辑</span><br>        thread.setUncaughtExceptionHandler(MY_UNCAUGHT_EXCEPTION_HANDLER);<br>        <span class="hljs-keyword">return</span> thread;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="在线程池中应用自定义的-ThreadFactory"><a href="#在线程池中应用自定义的-ThreadFactory" class="headerlink" title="在线程池中应用自定义的 ThreadFactory"></a>在线程池中应用自定义的 <code>ThreadFactory</code></h2><p>将自定义的 <code>MyThreadFacroty</code> 设置进线程池配置中: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean(MALLCHAT_EXECUTOR)</span><br><span class="hljs-meta">@Primary</span><br><span class="hljs-keyword">public</span> ThreadPoolTaskExecutor <span class="hljs-title function_">mallchatExecutor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ThreadPoolTaskExecutor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolTaskExecutor</span>();<br>    executor.setWaitForTasksToCompleteOnShutdown(<span class="hljs-literal">true</span>);<br>    executor.setCorePoolSize(<span class="hljs-number">10</span>);<br>    executor.setMaxPoolSize(<span class="hljs-number">10</span>);<br>    executor.setQueueCapacity(<span class="hljs-number">200</span>);<br>    executor.setThreadNamePrefix(<span class="hljs-string">&quot;mallchat-executor-&quot;</span>);<br>    executor.setRejectedExecutionHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());<span class="hljs-comment">//满了调用线程执行，认为重要任务</span><br>    executor.setThreadFactory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThreadFactory</span>(executor)); <span class="hljs-comment">// 设置自定义的ThreadFactory</span><br>    executor.initialize();<br>    <span class="hljs-keyword">return</span> executor;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试捕获结果"><a href="#测试捕获结果" class="headerlink" title="测试捕获结果"></a>测试捕获结果</h2><p>使用以下代码进行测试: </p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs livescript">@Autowired<br>private ThreadPoolTaskExecutor threadPoolTaskExecutor;<br>@Test<br>public <span class="hljs-literal">void</span> thread1() throws InterruptedException &#123;<br>    Thread thread = <span class="hljs-keyword">new</span> Thread<span class="hljs-function"><span class="hljs-params">( ()-&gt;&#123;</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == <span class="hljs-number">1</span>) &#123;</span></span><br><span class="hljs-params"><span class="hljs-function">            log.error(<span class="hljs-string">&quot;1234&quot;</span>);</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;1234&quot;</span>);</span></span><br><span class="hljs-params"><span class="hljs-function">        &#125;</span></span><br><span class="hljs-params"><span class="hljs-function">    &#125;)</span>;</span><br><span class="hljs-function">    <span class="hljs-title">thread</span>.<span class="hljs-title">setUncaughtExceptionHandler</span><span class="hljs-params">(<span class="hljs-keyword">new</span> MyUncaughtExceptionHandler())</span>;</span><br><span class="hljs-function">    <span class="hljs-title">thread</span>.<span class="hljs-title">start</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">    <span class="hljs-title">Thread</span>.<span class="hljs-title">sleep</span><span class="hljs-params">(<span class="hljs-number">200</span>)</span>;</span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure><p>可以看到异常在log中的打印<br><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410151908995.png"></p><h1 id="对于项目中参数错误异常的捕获以及返回"><a href="#对于项目中参数错误异常的捕获以及返回" class="headerlink" title="对于项目中参数错误异常的捕获以及返回"></a>对于项目中参数错误异常的捕获以及返回</h1><p><code>Spring</code> 框架中提供了对于传参的限制条件的注解，如 <code>@NotBlank</code>, <code>@Length</code>, <code>@NotNull</code> 等注解，非常利于开发。然而，这些注解的报错信息只会在 log 中打印，而不会返回给前端。以下是一个示例：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Data</span><br>public class ModifyNameReq &#123;<br>    <span class="hljs-variable">@ApiModelProperty</span>(<span class="hljs-string">&quot;用户名&quot;</span>)<br>    <span class="hljs-variable">@NotBlank</span><br>    <span class="hljs-variable">@Length</span>(max = <span class="hljs-number">2</span>, message = <span class="hljs-string">&quot;用户名过长&quot;</span>)<br>    private String name;<br>&#125;<br></code></pre></td></tr></table></figure><p>当我传参为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;江上清风1111111&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>返回的结果: </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1728992170171</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">400</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Bad Request&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/capi/user/name&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>而错误信息只是在系统日志中进行打印</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">36</span>:<span class="hljs-number">10.159</span>  WARN <span class="hljs-number">40880</span> --- [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed <span class="hljs-keyword">for</span> argument [<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> <span class="hljs-keyword">public</span> com.chat.mallchat.common.common.domain.vo.resp.ApiResult&lt;java.lang.Void&gt; com.chat.mallchat.common.user.controller.UserController.modifyName(com.chat.mallchat.common.user.domain.vo.req.ModifyNameReq) <span class="hljs-keyword">with</span> <span class="hljs-number">2</span> errors: [Field error <span class="hljs-keyword">in</span> <span class="hljs-keyword">object</span> <span class="hljs-string">&#x27;modifyNameReq&#x27;</span> <span class="hljs-keyword">on</span> field <span class="hljs-string">&#x27;name&#x27;</span>: rejected value [江上清风<span class="hljs-number">1111111</span>]; codes [Length.modifyNameReq.<span class="hljs-keyword">name</span>,Length.<span class="hljs-keyword">name</span>,Length.java.lang.<span class="hljs-keyword">String</span>,Length]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [modifyNameReq.<span class="hljs-keyword">name</span>,<span class="hljs-keyword">name</span>]; arguments []; <span class="hljs-keyword">default</span> <span class="hljs-keyword">message</span> [<span class="hljs-keyword">name</span>],<span class="hljs-number">2</span>,<span class="hljs-number">0</span>]; <span class="hljs-keyword">default</span> <span class="hljs-keyword">message</span> [用户名过长]] [Field error <span class="hljs-keyword">in</span> <span class="hljs-keyword">object</span> <span class="hljs-string">&#x27;modifyNameReq&#x27;</span> <span class="hljs-keyword">on</span> field <span class="hljs-string">&#x27;id&#x27;</span>: rejected value [null]; codes [NotNull.modifyNameReq.id,NotNull.id,NotNull.java.lang.Long,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [modifyNameReq.id,id]; arguments []; <span class="hljs-keyword">default</span> <span class="hljs-keyword">message</span> [id]]; <span class="hljs-keyword">default</span> <span class="hljs-keyword">message</span> [别忘记传id]] ]<br></code></pre></td></tr></table></figure><p>因此，我们需要捕获抛出的异常中的错误信息，并利用自定义的 ApiResult 前后端交互协议进行返回。</p><h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><p>在 <code>log</code> 中可以看到抛出异常的类<br><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410151946927.png"><br>新建一个异常捕获的处理类, 其中</p><ul><li><code>@RestControllerAdvice</code> 用于标记 <code>GlobalExceptionHandler</code> 类为全局异常处理类，专门处理 REST 控制器中的异常，并以 JSON 格式返回响应;</li><li><code>@ExceptionHandler</code> 注解用于指定捕获特定类型的异常<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RestControllerAdvice</span><br><span class="hljs-variable">@Slf4j</span><br>public class GlobalExceptionHandler &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 前端传参数据据格式错误的异常捕获</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-variable">@ExceptionHandler</span>(value = MethodArgumentNotValidException.class)<br>    public ApiResult&lt;?&gt; <span class="hljs-built_in">methodArgumentNotValidException</span>(MethodArgumentNotValidException e) &#123;<br>        <span class="hljs-selector-tag">System</span><span class="hljs-selector-class">.out</span><span class="hljs-selector-class">.println</span>();<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">ApiResult</span><span class="hljs-selector-class">.fail</span>(null, null);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="查看异常数据"><a href="#查看异常数据" class="headerlink" title="查看异常数据"></a>查看异常数据</h2><p>进行断点查看抛出异常时的数据:<br><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410151956645.png" alt="报错断点"><br>可以看到, 异常的信息在 <code>bindingResult</code> 下的 <code>errors</code> 中, 其中 <code>field</code> 时发生错误的字段, <code>defaultMessage</code> 是在 <code>vo类</code> 中设置的错误信息.<br>在 <code>Handler类</code> 中对这些信息进行处理。其中, 不同属性的报错以逗号隔开:</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gml">@ExceptionHandler(value = MethodArgumentNotValidException.class)<br>public ApiResult&lt;?&gt; methodArgumentNotValidException(MethodArgumentNotValidException e) &#123;<br>    StringBuilder errorMsg = <span class="hljs-keyword">new</span> StringBuilder();<br>    e.getBindingResult().getFieldErrors().forEach(<span class="hljs-variable language_">x</span> -&gt; errorMsg.append(<span class="hljs-variable language_">x</span>.getField()).append(<span class="hljs-variable language_">x</span>.getDefaultMessage()).append(<span class="hljs-string">&quot;,&quot;</span>));<br>    String <span class="hljs-variable language_">message</span> = errorMsg.toString();<br>    <span class="hljs-keyword">return</span> ApiResult.fail(CommonErrorEnum.PARAM_INVALID.getCode(), <span class="hljs-variable language_">message</span>.substring(<span class="hljs-number">0</span>, <span class="hljs-variable language_">message</span>.length() - <span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="接口返回结果"><a href="#接口返回结果" class="headerlink" title="接口返回结果"></a>接口返回结果</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;success&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;errCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;errMsg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;name用户名过长&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>可以看到在 <code>errMsg</code> 中有处理过的信息了</p><h1 id="对系统内部异常的拦截"><a href="#对系统内部异常的拦截" class="headerlink" title="对系统内部异常的拦截"></a>对系统内部异常的拦截</h1><h2 id="捕获异常并处理"><a href="#捕获异常并处理" class="headerlink" title="捕获异常并处理"></a>捕获异常并处理</h2><p>当系统发生错误时，如果直接将详细的错误信息返回给前端（堆栈跟踪、异常类型等），可能会暴露内部实现细节或敏感数据，给潜在的攻击者提供利用漏洞的机会。因此，通过全局异常拦截，只返回固定的错误信息，如 “系统出错，请稍后再试”，可以有效地避免暴露内部信息，提升系统的安全性。<br>与上面对于 <code>参数异常捕获</code> 的方式一样, 不同的是只需要设置一个固定的返回信息就行。<br>对于 <code>Throwable.class</code> 的处理类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 拦截系统内部错误信息,防止暴露给前端</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> e</span><br><span class="hljs-comment"> */</span><br>@<span class="hljs-title function_ invoke__">ExceptionHandler</span>(value = <span class="hljs-built_in">Throwable</span>.<span class="hljs-keyword">class</span>)<br><span class="hljs-keyword">public</span> ApiResult<span class="hljs-meta">&lt;?</span>&gt; <span class="hljs-title function_ invoke__">throwable</span>(<span class="hljs-built_in">Throwable</span> e) &#123;<br>    log.<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&quot;system exception! the reason is: &#123;&#125;&quot;</span>, e.<span class="hljs-title function_ invoke__">getMessage</span>(), e);<br>    <span class="hljs-keyword">return</span> ApiResult.<span class="hljs-title function_ invoke__">fail</span>(CommonErrorEnum.SYSTEM_ERROR);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编写测试接口"><a href="#编写测试接口" class="headerlink" title="编写测试接口"></a>编写测试接口</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp">@GetMapping(<span class="hljs-string">&quot;/test&quot;</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> ApiResult&lt;UserInfoResp&gt; <span class="hljs-title">getUserInfo</span>()</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ApiResult.success()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试捕获以及接口返回结果"><a href="#测试捕获以及接口返回结果" class="headerlink" title="测试捕获以及接口返回结果"></a>测试捕获以及接口返回结果</h2><p>接口测试:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;success&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;errCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;errMsg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;系统出小差了, 请稍后再试哦~~&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>系统日志:<br><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410152035451.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为博客添加音乐播放器</title>
    <link href="/2024/10/13/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    <url>/2024/10/13/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>原本我在博客中使用的是<a href="https://github.com/MoePlayer/hexo-tag-aplayer?tab=readme-ov-file">hexo-tag-aplayer</a>, 但是它的需要手动设置歌曲的资源, 包括歌, 歌词, 以及歌曲封面……实在是麻烦! 那么有没有办法能直接导入歌单中的歌曲信息呢? 当然有了!<br>它就是 <a href="https://github.com/metowolf/MetingJS?tab=readme-ov-file">MetingJS</a>, <code>A powerful plugin connect APlayer and Meting</code></p><h1 id="MetingJS的使用"><a href="#MetingJS的使用" class="headerlink" title="MetingJS的使用"></a>MetingJS的使用</h1><p>根据 <a href="https://github.com/metowolf/MetingJS?tab=readme-ov-file">MEthingJS</a> 的官方文档, 要在博客中启用相当的简单, 以网易云音乐为例, 文档中给出的方式是</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- require APlayer --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- require MetingJS --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">meting-js</span></span><br><span class="hljs-tag"><span class="hljs-attr">server</span>=<span class="hljs-string">&quot;netease&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;playlist&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">id</span>=<span class="hljs-string">&quot;60198&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">meting-js</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那么我们需要做的就只有两步</p><ol><li>引入依赖</li><li>将歌单信息写入配置文件中</li></ol><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>在 <code>_config.fluid.yml</code> 文件的 <code>custom_css</code> 和 <code>custom_js</code> 中添加官方提供的 CDN</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">custom_js: <br>  <span class="hljs-comment"># APlayer, MetingJS</span><br>  - <span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/npm/</span>aplayer<span class="hljs-regexp">/dist/</span>APlayer.min.js<br>  - <span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/npm/m</span>eting@<span class="hljs-number">2</span><span class="hljs-regexp">/dist/</span>Meting.min.js<br><br>custom_css:<br>  <span class="hljs-comment"># Aplayer</span><br>  - <span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/npm/</span>aplayer<span class="hljs-regexp">/dist/</span>APlayer.min.css<br></code></pre></td></tr></table></figure><h2 id="添加歌单配置信息"><a href="#添加歌单配置信息" class="headerlink" title="添加歌单配置信息"></a>添加歌单配置信息</h2><p>在 <code>custom_html</code> 中加入歌单配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml">custom_html: <br>            <span class="hljs-comment">&lt;!-- 音乐播放器 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">meting-js</span></span><br><span class="hljs-tag">              <span class="hljs-attr">server</span>=<span class="hljs-string">&quot;netease&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;playlist&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;7069797967&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">autoplay</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">fixed</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">volume</span>=<span class="hljs-string">&quot;0.1&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">loop</span>=<span class="hljs-string">&quot;all&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;random&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">meting-js</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span id="jump">配置信息</span></p><table><thead><tr><th>option</th><th>default</th><th>description</th></tr></thead><tbody><tr><td>id</td><td>require</td><td>歌曲ID &#x2F; 播放列表ID &#x2F; 专辑ID &#x2F; 搜索关键词</td></tr><tr><td>server</td><td>require</td><td>音乐平台: 网易云 (netease), 腾讯 (tencent), 酷狗 (kugou), 虾米 (xiami), 百度 (baidu)</td></tr><tr><td>type</td><td>require</td><td>类型: 歌曲 (song), 播放列表 (playlist), 专辑 (album), 搜索 (search), 艺术家 (artist)</td></tr><tr><td>auto</td><td>options</td><td>音乐链接，支持: 网易云 (netease), 腾讯 (tencent), 虾米 (xiami)</td></tr><tr><td>fixed</td><td>false</td><td>启用固定模式</td></tr><tr><td>mini</td><td>false</td><td>启用迷你模式</td></tr><tr><td>autoplay</td><td>false</td><td>自动播放音频</td></tr><tr><td>theme</td><td>#2980b9</td><td>主色调</td></tr><tr><td>loop</td><td>all</td><td>播放器循环播放模式，可选值: ‘all’（全部）, ‘one’（单曲）, ‘none’（无循环）</td></tr><tr><td>order</td><td>list</td><td>播放器播放顺序，可选值: ‘list’（列表顺序）, ‘random’（随机）</td></tr><tr><td>preload</td><td>auto</td><td>预加载设置，可选值: ‘none’（无预加载）, ‘metadata’（仅元数据）, ‘auto’（自动）</td></tr><tr><td>volume</td><td>0.7</td><td>默认音量，注意播放器会记住用户设置，用户自行设置后默认音量将不生效</td></tr><tr><td>mutex</td><td>true</td><td>防止多个播放器同时播放，当此播放器开始播放时暂停其他播放器</td></tr><tr><td>lrc-type</td><td>0</td><td>歌词类型</td></tr><tr><td>list-folded</td><td>false</td><td>是否在首次加载时折叠播放列表</td></tr><tr><td>list-max-height</td><td>340px</td><td>播放列表最大高度</td></tr><tr><td>storage-name</td><td>metingjs</td><td>存储播放器设置的 localStorage 键名</td></tr></tbody></table><p>添加完成后执行 Hexo 三连就能看到效果了</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo cl <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo s<br></code></pre></td></tr></table></figure><p><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410131410906.png"><br>对于歌词显示,参照 <code>MetingJS</code> 的 <a href="https://github.com/metowolf/MetingJS/issues/23">Issue #23</a>, 简单的方式是将 <code>lrc-type</code>改为 <code>&quot;1&quot;</code>, 参数配置如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 音乐播放器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meting-js</span></span><br><span class="hljs-tag">    <span class="hljs-attr">server</span>=<span class="hljs-string">&quot;netease&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;playlist&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;7069797967&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">autoplay</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">fixed</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">volume</span>=<span class="hljs-string">&quot;0.1&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">loop</span>=<span class="hljs-string">&quot;all&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;random&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">lrc-type</span>=<span class="hljs-string">&quot;1&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">meting-js</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="使用注入的方式修改配置文件"><a href="#使用注入的方式修改配置文件" class="headerlink" title="使用注入的方式修改配置文件"></a>使用注入的方式修改配置文件</h1><p>虽然直接在页面中修改 <code>HTML</code> 就能使用, 但这相当的不美观! 根据 <code>Fluid</code> 提供的注入方法, 可以实现像主题的配置一样在 <code>_config.fluid.yml</code> 中修改配置信息</p><h2 id="编写注入脚本"><a href="#编写注入脚本" class="headerlink" title="编写注入脚本"></a>编写注入脚本</h2><p>在博客的根目录下的 <code>scripts</code> 目录的 <code>js</code> 文件中添加以下注入信息</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">hexo.extend.<span class="hljs-built_in">filter</span>.register(<span class="hljs-string">&#x27;theme_inject&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">injects</span>) &#123;<br>  injects.head.file(<span class="hljs-string">&#x27;aplayer&#x27;</span>, <span class="hljs-string">&#x27;source/_inject/Aplayer.ejs&#x27;</span>);<br>  &#125;);<br></code></pre></td></tr></table></figure><p>在 <code>source</code> 目录下新建 <code>_inject</code> 目录存放注入模板文件,并新建 <code>Aplayer.ejs</code> 文件并编写: </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;%<br>theme.Aplayer = theme.Aplayer || &#123;&#125;;<br>theme.Aplayer.<span class="hljs-keyword">enable</span> = theme.Aplayer.<span class="hljs-keyword">enable</span> !== undefined ? theme.Aplayer.<span class="hljs-keyword">enable</span> : <span class="hljs-keyword">false</span>;<br>theme.Aplayer.<span class="hljs-keyword">server</span> = theme.Aplayer.<span class="hljs-keyword">server</span> || <span class="hljs-string">&#x27;&#x27;</span>;<br>theme.Aplayer.<span class="hljs-keyword">type</span> = theme.Aplayer.<span class="hljs-keyword">type</span> || <span class="hljs-string">&#x27;&#x27;</span>;<br>theme.Aplayer.id = theme.Aplayer.id || <span class="hljs-string">&#x27;&#x27;</span>;<br>theme.Aplayer.autoplay = theme.Aplayer.autoplay !== undefined ? theme.Aplayer.autoplay : <span class="hljs-keyword">false</span>;<br>theme.Aplayer.fixed = theme.Aplayer.fixed !== undefined ? theme.Aplayer.fixed : <span class="hljs-keyword">false</span>;<br>theme.Aplayer.volume = theme.Aplayer.volume || <span class="hljs-string">&#x27;&#x27;</span>;<br>theme.Aplayer.<span class="hljs-keyword">loop</span> = theme.Aplayer.<span class="hljs-keyword">loop</span> || <span class="hljs-string">&#x27;&#x27;</span>;<br>theme.Aplayer.<span class="hljs-keyword">order</span> = theme.Aplayer.<span class="hljs-keyword">order</span> || <span class="hljs-string">&#x27;&#x27;</span>;<br>theme.Aplayer.auto = theme.Aplayer.auto !== undefined ? theme.Aplayer.auto : <span class="hljs-keyword">false</span>;<br>theme.Aplayer.mini = theme.Aplayer.mini !== undefined ? theme.Aplayer.mini : <span class="hljs-keyword">false</span>;<br>theme.Aplayer.theme = theme.Aplayer.theme || <span class="hljs-string">&#x27;&#x27;</span>;<br>theme.Aplayer.preload = theme.Aplayer.preload || <span class="hljs-string">&#x27;&#x27;</span>;<br>theme.Aplayer.mutex = theme.Aplayer.mutex !== undefined ? theme.Aplayer.mutex : <span class="hljs-keyword">false</span>;<br>theme.Aplayer.lrcType = theme.Aplayer.lrcType || <span class="hljs-string">&#x27;&#x27;</span>;<br>theme.Aplayer.listFolded = theme.Aplayer.listFolded !== undefined ? theme.Aplayer.listFolded : <span class="hljs-keyword">false</span>;<br>theme.Aplayer.listMaxHeight = theme.Aplayer.listMaxHeight || <span class="hljs-string">&#x27;&#x27;</span>;<br>theme.Aplayer.storageName = theme.Aplayer.storageName || <span class="hljs-string">&#x27;&#x27;</span>;<br>%&gt;<br><br>&lt;% <span class="hljs-keyword">if</span> (theme.Aplayer.<span class="hljs-keyword">enable</span>) &#123; %&gt;<br>  &lt;!<span class="hljs-comment">-- 渲染播放器 --&gt;</span><br>  &lt;meting-js<br>    <span class="hljs-keyword">server</span>=&quot;&lt;%= theme.Aplayer.server %&gt;&quot;<br>    <span class="hljs-keyword">type</span>=&quot;&lt;%= theme.Aplayer.type %&gt;&quot;<br>    id=&quot;&lt;%= theme.Aplayer.id %&gt;&quot;<br>    autoplay=&quot;&lt;%= theme.Aplayer.autoplay %&gt;&quot;<br>    fixed=&quot;&lt;%= theme.Aplayer.fixed %&gt;&quot;<br>    volume=&quot;&lt;%= theme.Aplayer.volume %&gt;&quot;<br>    <span class="hljs-keyword">loop</span>=&quot;&lt;%= theme.Aplayer.loop %&gt;&quot;<br>    <span class="hljs-keyword">order</span>=&quot;&lt;%= theme.Aplayer.order %&gt;&quot;<br>    auto=&quot;&lt;%= theme.Aplayer.auto %&gt;&quot;<br>    mini=&quot;&lt;%= theme.Aplayer.mini %&gt;&quot;<br>    theme=&quot;&lt;%= theme.Aplayer.theme %&gt;&quot;<br>    preload=&quot;&lt;%= theme.Aplayer.preload %&gt;&quot;<br>    mutex=&quot;&lt;%= theme.Aplayer.mutex %&gt;&quot;<br>    lrc-<span class="hljs-keyword">type</span>=&quot;&lt;%= theme.Aplayer.lrcType %&gt;&quot;<br>    list-folded=&quot;&lt;%= theme.Aplayer.listFolded %&gt;&quot;<br>    list-max-height=&quot;&lt;%= theme.Aplayer.listMaxHeight %&gt;&quot;<br>    <span class="hljs-keyword">storage</span>-<span class="hljs-type">name</span>=&quot;&lt;%= theme.Aplayer.storageName %&gt;&quot;&gt;<br>  &lt;/meting-js&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><h2 id="在配置文件中添加-Aplayer-的配置项"><a href="#在配置文件中添加-Aplayer-的配置项" class="headerlink" title="在配置文件中添加 Aplayer 的配置项"></a>在配置文件中添加 Aplayer 的配置项</h2><p>将前面的 <code>CDN</code> 以及 <code>HTML</code> 删除, 然后再 <code>_config.fluid.yml</code> 中添加以下配置项:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Aplayer 配置</span><br><span class="hljs-attr">Aplayer:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 控制播放器是否启用</span><br>  <span class="hljs-attr">server:</span> <span class="hljs-string">netease</span>  <span class="hljs-comment"># 音乐平台</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">playlist</span>  <span class="hljs-comment"># 类型: song, playlist, album, search, artist</span><br>  <span class="hljs-attr">id:</span> <span class="hljs-number">7069797967</span>  <span class="hljs-comment"># 歌曲ID / 播放列表ID / 专辑ID / 搜索关键词</span><br>  <span class="hljs-attr">autoplay:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 是否自动播放</span><br>  <span class="hljs-attr">fixed:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 是否启用固定模式</span><br>  <span class="hljs-attr">volume:</span> <span class="hljs-number">0.1</span>  <span class="hljs-comment"># 默认音量</span><br>  <span class="hljs-attr">loop:</span> <span class="hljs-string">all</span>  <span class="hljs-comment"># 播放循环模式: all, one, none</span><br>  <span class="hljs-attr">order:</span> <span class="hljs-string">random</span>  <span class="hljs-comment"># 播放顺序: list, random</span><br>  <span class="hljs-attr">auto:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 是否启用自动音乐链接</span><br>  <span class="hljs-attr">mini:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 是否启用迷你模式</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">&quot;#2980b9&quot;</span>  <span class="hljs-comment"># 播放器主色调</span><br>  <span class="hljs-attr">preload:</span> <span class="hljs-string">auto</span>  <span class="hljs-comment"># 预加载设置: none, metadata, auto</span><br>  <span class="hljs-attr">mutex:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 是否防止多播放器同时播放</span><br>  <span class="hljs-attr">lrcType:</span> <span class="hljs-number">1</span>  <span class="hljs-comment"># 歌词类型</span><br>  <span class="hljs-attr">listFolded:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 播放列表是否折叠</span><br>  <span class="hljs-attr">listMaxHeight:</span>   <span class="hljs-comment"># 播放列表最大高度</span><br>  <span class="hljs-attr">storageName:</span>   <span class="hljs-comment"># localStorage 的键名，用于存储播放器设置 </span><br></code></pre></td></tr></table></figure><p>对于配置项, 参照<a href="#jump">配置信息表格</a>. 若配置项为空, 会使用 <code>Aplayer</code> 和 <code>MetingJS</code> 默认的配置——没错,约定大于配置!</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://aplayer.js.org/#/zh-Hans/">Aplayer</a><br><a href="https://github.com/DIYgod/APlayer">MetingJS</a><br><a href="https://github.com/metowolf/MetingJS/issues/23">MetingJS Issue 歌词默认隐藏 #23</a><br><a href="https://hexo.fluid-dev.com/docs/advance/#hexo-%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81">Fluid 注入代码</a><br><a href="https://moechun.fun/2022/07/28/Hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8aplayer%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E6%8F%92%E4%BB%B6/#%E4%B8%80%E3%80%81%E7%8B%AC%E7%AB%8B%E9%83%A8%E7%BD%B2">闪闪の小窝博客</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为linux服务器配置网络代理以及可视化面板</title>
    <link href="/2024/10/06/%E4%B8%BAlinux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E4%BB%A5%E5%8F%8A%E5%8F%AF%E8%A7%86%E5%8C%96%E9%9D%A2%E6%9D%BF/"/>
    <url>/2024/10/06/%E4%B8%BAlinux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E4%BB%A5%E5%8F%8A%E5%8F%AF%E8%A7%86%E5%8C%96%E9%9D%A2%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>国内服务器要使用 <code>github</code> 克隆项目时实在太慢了! 还有等了半天结果克隆失败的情况,实在是恶心人, 因此决定用 clash 为服务器添加一个代理</p>          </div><h1 id="服务器启动-Clash"><a href="#服务器启动-Clash" class="headerlink" title="服务器启动 Clash"></a>服务器启动 Clash</h1><p>参照 <a href="https://github.com/Elegycloud/clash-for-linux-backup?tab=readme-ov-file">clash-for-linux-backup</a> 项目的教程, 第一步是克隆项目.<br>找一个国内的镜像源进行克隆, 这里我用的是githubfast</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://githubfast.com/Elegycloud/clash-for-linux-backup.git<br></code></pre></td></tr></table></figure><p><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410061935377.png"><br>配置 <code>clash</code> 订阅地址, 在  <code>CLASH_URL</code> 处填入订阅地址, <code>CLASH_SECRET</code> 为在 <code>Dashboard</code> 的登陆密码,若不填则随机生成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim clash-for-linux-backup/.env<br></code></pre></td></tr></table></figure><p><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410061940755.png"><br>为项目中的脚本添加可执行权限</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">cd clash-for-linux-<span class="hljs-keyword">backup</span><br><span class="hljs-keyword"></span>chmod +x start.<span class="hljs-keyword">sh </span><span class="hljs-keyword">shutdown.sh </span>restart.<span class="hljs-keyword">sh </span><br></code></pre></td></tr></table></figure><p>启动脚本, 保存生成的 <code>Secret</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./start.sh<br></code></pre></td></tr></table></figure><p><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410061945784.png"><br>启用代理</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">source</span> /etc/<span class="hljs-keyword">profile</span>.d/clash.<span class="hljs-keyword">sh</span><br>proxy_on<br></code></pre></td></tr></table></figure><p><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410061948952.png"><br>检查服务端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">netstat</span> -tln | grep -E &#x27;<span class="hljs-number">9090</span>|<span class="hljs-number">789</span>.&#x27;<br></code></pre></td></tr></table></figure><p><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410061949015.png"><br>检测环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">env</span> | grep -E <span class="hljs-string">&#x27;http_proxy|https_proxy&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410061950973.png"><br>均无问题则启动成功!</p><h1 id="修改配置以及关闭代理"><a href="#修改配置以及关闭代理" class="headerlink" title="修改配置以及关闭代理"></a>修改配置以及关闭代理</h1><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>在 <code>conf/config.yaml</code> 修改配置, 完成后需要执行项目下 <code>restart.sh</code> 的脚本</p><h2 id="关闭代理"><a href="#关闭代理" class="headerlink" title="关闭代理"></a>关闭代理</h2><p>在项目目录下执行 <code>shutdown.sh</code> 脚本, 并刷新环境</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">./shutdown.sh<br>proxy_off<br></code></pre></td></tr></table></figure><h1 id="Clash-Dashboard"><a href="#Clash-Dashboard" class="headerlink" title="Clash Dashboard"></a>Clash Dashboard</h1><p>首先要在云服务器厂商的服务器控制台将 <strong><code>9090</code> 端口放开</strong><br>接下来就可以在浏览器中访问服务器的 <code>Clash Dashboard</code> 了,地址为 <code>http://&lt;ip&gt;:9090/ui</code><br>在 <code>API Base URL</code> 中填入 <code>http://&lt;ip&gt;:9090</code>,在 <code>Secret(optional)</code> 一栏中输入启动成功后输出的 <code>Secret</code>, 然后点击 <code>ADD</code>, 然后就进入 <code>Dashboard</code> 界面了<br><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410062028254.png"><br><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410062032340.png"><br>其余的相关操作可以参考 <a href="https://github.com/haishanh/yacd?tab=readme-ov-file">yacd</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/Elegycloud/clash-for-linux-backup">clash-for-linux-backup</a></li><li><a href="https://github.com/haishanh/yacd?tab=readme-ov-file">yacd</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Clash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Fluid背景固定以及添加加载动画</title>
    <link href="/2024/10/04/Hexo-Fluid%E8%83%8C%E6%99%AF%E5%9B%BA%E5%AE%9A%E4%BB%A5%E5%8F%8A%E6%B7%BB%E5%8A%A0%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB/"/>
    <url>/2024/10/04/Hexo-Fluid%E8%83%8C%E6%99%AF%E5%9B%BA%E5%AE%9A%E4%BB%A5%E5%8F%8A%E6%B7%BB%E5%8A%A0%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="背景固定"><a href="#背景固定" class="headerlink" title="背景固定"></a>背景固定</h1><p>参考了<a href="https://qingshaner.com/Hexo%20Fluid%E4%B8%BB%E9%A2%98%E8%83%8C%E6%99%AF%E5%9B%BA%E5%AE%9A(ES6%E6%94%B9%E5%86%99%E7%89%88)%E4%B8%8E%E6%AF%9B%E7%8E%BB%E7%92%83%E5%BA%95%E9%A1%B5/#%E8%83%8C%E6%99%AF%E5%85%A8%E5%B1%8F%E5%9B%BA%E5%AE%9A">清山</a>的博客</p><ol><li>添加 <code>background.js</code> 文件<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">document</span><br>  .<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;#web_bg&#x27;</span>)<br>  .setAttribute(<span class="hljs-string">&#x27;style&#x27;</span>, `background-image: $&#123;<span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;.banner&#x27;</span>).style.background.split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>]&#125;;position: fixed;width: <span class="hljs-number">100</span>%;height: <span class="hljs-number">100</span>%;z-index: <span class="hljs-number">-1</span>;background-size: cover;`);<br><br><span class="hljs-built_in">document</span><br>  .<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&quot;#banner&quot;</span>)<br>  .setAttribute(<span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-string">&#x27;background-image: url()&#x27;</span>)<br><br><span class="hljs-built_in">document</span><br>  .<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&quot;#banner .mask&quot;</span>)<br>  .setAttribute(<span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-string">&#x27;background-color:rgba(0,0,0,0)&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li>在 <code>hexo</code> 中注入html<br>在 <code>Fluid</code>主题下由两种方式,一种是 <code>Hexo</code> 注入, 另一种方式是 <code>Fluid</code> 提供的注入方式, 注入方式是在博客文件根目录下新建一个 <code>scripts</code> 目录,在其中建立一个 <code>js</code> 文件, 详细可见 <a href="https://hexo.fluid-dev.com/docs/advance/#hexo-%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81">Fluid官方文档</a><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">hexo.extend.injector.register(<span class="hljs-string">&quot;body_begin&quot;</span>, `&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;web_bg&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;`);<br>hexo.extend.injector.register(<span class="hljs-string">&quot;body_end&quot;</span>,`&lt;<span class="hljs-keyword">script</span> src=<span class="hljs-string">&quot;$&#123;siteRoot&#125;js/backgroundize.js&quot;</span>&gt;&lt;/<span class="hljs-keyword">script</span>&gt;`);<br></code></pre></td></tr></table></figure></li></ol><h1 id="添加加载动画"><a href="#添加加载动画" class="headerlink" title="添加加载动画"></a>添加加载动画</h1><p>我选择的加载动画是在 <a href="codepen.io">codepen.io</a> 中找的<a href="https://codepen.io/jackrugile/pen/JddmaX/">彩虹动画</a><br>当然,此处直接拿到的 <code>html</code> 与 <code>css</code> 都是不能<strong>直接使用</strong>的,还需要对样式进行处理,完整的代码如下: </p><ul><li>在 <code>html</code> 之上添加一个容器 <code>loader-container</code> 以包裹全部的样式:<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loader-container&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loader&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loader&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loader-inner&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loader-line-wrap&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loader-line&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loader-line-wrap&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loader-line&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loader-line-wrap&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loader-line&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loader-line-wrap&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loader-line&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loader-line-wrap&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loader-line&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>在 <code>css</code> 中添加 <code>loader-container</code> 的样式,并确保所有动画均在最上层:<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#loader-container</span> &#123;<br>   <span class="hljs-attribute">position</span>: fixed; <span class="hljs-comment">/* 或 absolute，根据需求 */</span><br>   <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">z-index</span>: <span class="hljs-number">99999</span>; <span class="hljs-comment">/* 确保在最上层 */</span><br>   <span class="hljs-attribute">display</span>: flex;<br>   <span class="hljs-attribute">justify-content</span>: center;<br>   <span class="hljs-attribute">align-items</span>: center;<br>   <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.7</span>); <span class="hljs-comment">/* 可选：添加背景以增加可见性 */</span><br>&#125;<br><br><span class="hljs-selector-class">.loader</span>,<br><span class="hljs-selector-class">.loader-inner</span>,<br><span class="hljs-selector-class">.loader-line-wrap</span>,<br><span class="hljs-selector-class">.loader-line</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute; <span class="hljs-comment">/* 或 fixed，根据需要选择 */</span><br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">99999</span>; <span class="hljs-comment">/* 确保在最上层 */</span><br>&#125;<br><br><span class="hljs-selector-class">.loader</span> &#123;<br>   <span class="hljs-attribute">background</span>: <span class="hljs-number">#000</span>;<br>   <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(<span class="hljs-number">#222</span>, <span class="hljs-number">#000</span>);<br>   <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">overflow</span>: hidden;<br>   <span class="hljs-attribute">position</span>: fixed;<br>   <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">z-index</span>: <span class="hljs-number">99999</span>;<br>&#125;<br><br><span class="hljs-selector-class">.loader-inner</span> &#123;<br>   <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;<br>   <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">margin</span>: auto;<br>   <span class="hljs-attribute">position</span>: absolute;<br>   <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.loader-line-wrap</span> &#123;<br>   <span class="hljs-attribute">animation</span>: <br>     spin <span class="hljs-number">2000ms</span> <span class="hljs-built_in">cubic-bezier</span>(.<span class="hljs-number">175</span>, .<span class="hljs-number">885</span>, .<span class="hljs-number">32</span>, <span class="hljs-number">1.275</span>) infinite<br>  ;<br>   <span class="hljs-attribute">box-sizing</span>: border-box;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>   <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">overflow</span>: hidden;<br>   <span class="hljs-attribute">position</span>: absolute;<br>   <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">50%</span> <span class="hljs-number">100%</span>;<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.loader-line</span> &#123;<br>   <span class="hljs-attribute">border</span>: <span class="hljs-number">4px</span> solid transparent;<br>   <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100%</span>;<br>   <span class="hljs-attribute">box-sizing</span>: border-box;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>   <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>   <span class="hljs-attribute">position</span>: absolute;<br>   <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.loader-line-wrap</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) &#123; <span class="hljs-attribute">animation-delay</span>: -<span class="hljs-number">50ms</span>; &#125;<br><span class="hljs-selector-class">.loader-line-wrap</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123; <span class="hljs-attribute">animation-delay</span>: -<span class="hljs-number">100ms</span>; &#125;<br><span class="hljs-selector-class">.loader-line-wrap</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123; <span class="hljs-attribute">animation-delay</span>: -<span class="hljs-number">150ms</span>; &#125;<br><span class="hljs-selector-class">.loader-line-wrap</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">4</span>) &#123; <span class="hljs-attribute">animation-delay</span>: -<span class="hljs-number">200ms</span>; &#125;<br><span class="hljs-selector-class">.loader-line-wrap</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">5</span>) &#123; <span class="hljs-attribute">animation-delay</span>: -<span class="hljs-number">250ms</span>; &#125;<br><br><span class="hljs-selector-class">.loader-line-wrap</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) <span class="hljs-selector-class">.loader-line</span> &#123;<br>   <span class="hljs-attribute">border-color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">0</span>, <span class="hljs-number">80%</span>, <span class="hljs-number">60%</span>);<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">90px</span>;<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">90px</span>;<br>   <span class="hljs-attribute">top</span>: <span class="hljs-number">7px</span>;<br>&#125;<br><span class="hljs-selector-class">.loader-line-wrap</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) <span class="hljs-selector-class">.loader-line</span> &#123;<br>   <span class="hljs-attribute">border-color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">60</span>, <span class="hljs-number">80%</span>, <span class="hljs-number">60%</span>);<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">76px</span>;<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">76px</span>;<br>   <span class="hljs-attribute">top</span>: <span class="hljs-number">14px</span>;<br>&#125;<br><span class="hljs-selector-class">.loader-line-wrap</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) <span class="hljs-selector-class">.loader-line</span> &#123;<br>   <span class="hljs-attribute">border-color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">120</span>, <span class="hljs-number">80%</span>, <span class="hljs-number">60%</span>);<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">62px</span>;<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">62px</span>;<br>   <span class="hljs-attribute">top</span>: <span class="hljs-number">21px</span>;<br>&#125;<br><span class="hljs-selector-class">.loader-line-wrap</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">4</span>) <span class="hljs-selector-class">.loader-line</span> &#123;<br>   <span class="hljs-attribute">border-color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">180</span>, <span class="hljs-number">80%</span>, <span class="hljs-number">60%</span>);<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">48px</span>;<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">48px</span>;<br>   <span class="hljs-attribute">top</span>: <span class="hljs-number">28px</span>;<br>&#125;<br><span class="hljs-selector-class">.loader-line-wrap</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">5</span>) <span class="hljs-selector-class">.loader-line</span> &#123;<br>   <span class="hljs-attribute">border-color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">240</span>, <span class="hljs-number">80%</span>, <span class="hljs-number">60%</span>);<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">34px</span>;<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">34px</span>;<br>   <span class="hljs-attribute">top</span>: <span class="hljs-number">35px</span>;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> spin &#123;<br>   <span class="hljs-number">0%</span>, <span class="hljs-number">15%</span> &#123;<br>     <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>     <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">360deg</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>将加载动画的 <code>html</code> 文件和 <code>css</code> 文件在本地建立对应的文件并引入<br>   <code>html</code> 以注入方式加载到 Fluid 中:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">hexo.extend.<span class="hljs-built_in">filter</span>.register(<span class="hljs-string">&#x27;theme_inject&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">injects</span>) &#123;<br><br>  <span class="hljs-comment">// 页面加载动画  </span><br>  injects.bodyBegin.file(<span class="hljs-string">&#x27;loader&#x27;</span>, <span class="hljs-string">&#x27;source/html/loader.html&#x27;</span>);<br><br>  &#125;);<br></code></pre></td></tr></table></figure><ul><li>编写 <code>loader.js</code>, 使用 <code>jquery</code> 方式使网页加载完成后动画消失<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">loadScript</span>(<span class="hljs-params">url, callback</span>) &#123;<br>    <span class="hljs-keyword">const</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);<br>    script.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;text/javascript&#x27;</span>;<br>    script.<span class="hljs-property">src</span> = url;<br><br>    script.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">callback</span>();<br>    &#125;;<br><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(script);<br>&#125;<br><br><span class="hljs-comment">// 加载 jQuery</span><br><span class="hljs-title function_">loadScript</span>(<span class="hljs-string">&#x27;https://code.jquery.com/jquery-3.6.0.min.js&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        $(<span class="hljs-string">&quot;#loader-container&quot;</span>).<span class="hljs-title function_">fadeOut</span>(<span class="hljs-number">560</span>);<br>    &#125;);<br>&#125;);<br><br></code></pre></td></tr></table></figure>最后在 <code>_config.fluid.yml</code> 中引入 <code>loader.css</code> 和 <code>loader.js</code> 并执行 hexo 三联就完成加载动画的添加了</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://qingshaner.com/Hexo%20Fluid%E4%B8%BB%E9%A2%98%E8%83%8C%E6%99%AF%E5%9B%BA%E5%AE%9A(ES6%E6%94%B9%E5%86%99%E7%89%88)%E4%B8%8E%E6%AF%9B%E7%8E%BB%E7%92%83%E5%BA%95%E9%A1%B5/#%E8%83%8C%E6%99%AF%E5%85%A8%E5%B1%8F%E5%9B%BA%E5%AE%9A">清山博客Fluid主题背景固定与毛玻璃底页</a><br><a href="https://hexo.fluid-dev.com/docs/advance/#hexo-%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81">Fluid官方文档 注入代码</a><br><a href="https://blog.csdn.net/m0_66047725/article/details/129896812">CSDN 为你的网站加上Loading等待加载效果吧 | Loading页面加载添加教程</a><br><a href="codepen.io">codepen.io</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fluid主题添加Subtitle颜色渐变效果和鼠标点击特效</title>
    <link href="/2024/10/03/Fluid%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0Subtitle%E9%A2%9C%E8%89%B2%E6%B8%90%E5%8F%98%E6%95%88%E6%9E%9C%E5%92%8C%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E7%89%B9%E6%95%88/"/>
    <url>/2024/10/03/Fluid%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0Subtitle%E9%A2%9C%E8%89%B2%E6%B8%90%E5%8F%98%E6%95%88%E6%9E%9C%E5%92%8C%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E7%89%B9%E6%95%88/</url>
    
    <content type="html"><![CDATA[<h1 id="Slogan-颜色渐变"><a href="#Slogan-颜色渐变" class="headerlink" title="Slogan 颜色渐变"></a>Slogan 颜色渐变</h1><div class="note note-info">            <p>在 <code>Fluid</code> 主题下,每个页面都有一个 <code>Slogan</code> 标题, 虽然 <code>Fluid</code> 本身提供了打字机特效,但白色的字体太过单薄,不适合我这种喜欢花里胡哨的人.</p>          </div><p>要为 <code>Slogan</code>  添加颜色,其实就是编写一个 <code>css</code> 对原本的样式进行替换.在<a href="https://emoryhuang.cn/blog/1729600336.html#%E5%A4%B4%E9%83%A8%E6%89%93%E5%AD%97%E6%9C%BA%E9%A2%9C%E8%89%B2%E6%95%88%E6%9E%9C%E6%B8%90%E5%8F%98">emoryhuang</a>的博客中有对此进行修改的css,然而在这个css中只对<code>subtitle</code>的样式进行了修改,而没有为开启打字机后的游标进行修改.在 <code>hexo-them-fluid</code> 的 <code>css</code>中全局搜索 <code>#subtitle</code> ,我们可以找到下面的样式<br><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410031425808.png"><br>因此,只需要在博主提供的基础上再额外添加对于 <code>.typerd-cursor</code> 的样式修改即可</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 打字机效果渐变 -bynote.cn*/</span><br><br><span class="hljs-selector-id">#subtitle</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(-<span class="hljs-number">45deg</span>, <span class="hljs-number">#ee7752</span>, <span class="hljs-number">#ce3e75</span>, <span class="hljs-number">#23a6d5</span>, <span class="hljs-number">#23d5ab</span>);<br>    <span class="hljs-attribute">background-size</span>: <span class="hljs-number">400%</span> <span class="hljs-number">400%</span>;<br>    -webkit-<span class="hljs-attribute">animation</span>: Gradient <span class="hljs-number">10s</span> ease infinite;<br>    -moz-<span class="hljs-attribute">animation</span>: Gradient <span class="hljs-number">10s</span> ease infinite;<br>    <span class="hljs-attribute">animation</span>: Gradient <span class="hljs-number">10s</span> ease infinite;<br>    -o-user-<span class="hljs-selector-tag">select</span>: none;<br>    -ms-user-<span class="hljs-selector-tag">select</span>: none;<br>    -webkit-user-<span class="hljs-selector-tag">select</span>: none;<br>    -moz-user-<span class="hljs-selector-tag">select</span>: none;<br>    user-<span class="hljs-selector-tag">select</span>: none;<br>    -webkit-<span class="hljs-attribute">background-clip</span>: text;<br>    -webkit-<span class="hljs-selector-tag">text</span>-<span class="hljs-attribute">fill</span>-<span class="hljs-attribute">color</span>: transparent;<br>    <span class="hljs-attribute">border-top-left-radius</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">border-top-right-radius</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-id">#subtitle</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">/* 以下为对游标样式的修改*/</span><br><span class="hljs-selector-class">.typed-cursor</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(-<span class="hljs-number">45deg</span>, <span class="hljs-number">#ee7752</span>, <span class="hljs-number">#ce3e75</span>, <span class="hljs-number">#23a6d5</span>, <span class="hljs-number">#23d5ab</span>);<br>    <span class="hljs-attribute">background-size</span>: <span class="hljs-number">400%</span> <span class="hljs-number">400%</span>;<br>    -webkit-<span class="hljs-attribute">animation</span>: Gradient <span class="hljs-number">10s</span> ease infinite;<br>    -moz-<span class="hljs-attribute">animation</span>: Gradient <span class="hljs-number">10s</span> ease infinite;<br>    <span class="hljs-attribute">animation</span>: Gradient <span class="hljs-number">10s</span> ease infinite;<br>    -webkit-<span class="hljs-attribute">background-clip</span>: text;<br>    -webkit-<span class="hljs-selector-tag">text</span>-<span class="hljs-attribute">fill</span>-<span class="hljs-attribute">color</span>: transparent;<br>    <span class="hljs-attribute">display</span>: inline-block; <span class="hljs-comment">/* 确保能够正确显示背景 */</span><br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">5px</span>; <span class="hljs-comment">/* 可选：增加与文本的间距 */</span><br>    user-<span class="hljs-selector-tag">select</span>: none; <span class="hljs-comment">/* 禁止文本选择 */</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>效果如下图<br><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410031431252.png"></p><h1 id="鼠标点击特效"><a href="#鼠标点击特效" class="headerlink" title="鼠标点击特效"></a>鼠标点击特效</h1><p>在 <a href="https://asteri5m.icu/archives/0c8538e7-5b5f-4897-8e8b-0cff84320473">Hexo&amp;Fluid魔改笔记</a> 博客中有提到如何添加三种鼠标的点击特效, 当然我最终选择的是这篇里没有提到的烟花爆炸特效.<br>参考 <a href="https://www.cnblogs.com/songhaixing/p/13754821.html">https://www.cnblogs.com/songhaixing/p/13754821.html</a> ,在此篇博客中提供了爆炸特效的<code>js</code>代码, 当然直接引用提供的 <code>cdn</code> 也是没有问题的,但是原版的特效范围太大了, 比较影响观感且点击产生的圆只有红色一种颜色, 因此我选择在本地新建文件再引用的方式添加特效.<br>提供的两个文件中 <a href="https://files.cnblogs.com/files/songhaixing/anime.min.js">anime.min.js</a> 是依赖库,不用做修改直接引用,<br>具体的动画参数均在 <a href="https://files.cnblogs.com/files/songhaixing/fireworks.js">fireworks.js</a> 中.<br>修改参数的位置以及在下面的代码中均已在注释处标明. 对于点击处产生的空心圆颜色的修改是在产生粒子时,统计各个颜色产生粒子的数量然后将颜色改为数量最少的粒子对应的颜色. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateCoords</span>(<span class="hljs-params">e</span>) &#123;<br>  pointerX = (e.<span class="hljs-property">clientX</span> || e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientX</span>) - canvasEl.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">left</span>,<br>  pointerY = e.<span class="hljs-property">clientY</span> || e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientY</span> - canvasEl.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">top</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setParticuleDirection</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">var</span> t = anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>, <span class="hljs-number">360</span>) * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> / <span class="hljs-number">180</span>,<br>      a = anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">35</span>, <span class="hljs-number">130</span>), <span class="hljs-comment">// 粒子扩散范围调整</span><br>      n = [-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>][anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)] * a;<br>  <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">x</span>: e.<span class="hljs-property">x</span> + n * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(t),<br>      <span class="hljs-attr">y</span>: e.<span class="hljs-property">y</span> + n * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(t)<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createParticule</span>(<span class="hljs-params">e, t</span>) &#123;<br>  <span class="hljs-keyword">var</span> a = &#123;&#125;;<br>  a.<span class="hljs-property">x</span> = e;<br>  a.<span class="hljs-property">y</span> = t;<br>  a.<span class="hljs-property">color</span> = colors[anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>, colors.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>)];<br>  a.<span class="hljs-property">radius</span> = anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">11.2</span>, <span class="hljs-number">22.4</span>); <span class="hljs-comment">// 粒子效果圆半径</span><br>  a.<span class="hljs-property">endPos</span> = <span class="hljs-title function_">setParticuleDirection</span>(a);<br>  a.<span class="hljs-property">draw</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      ctx.<span class="hljs-title function_">beginPath</span>();<br>      ctx.<span class="hljs-title function_">arc</span>(a.<span class="hljs-property">x</span>, a.<span class="hljs-property">y</span>, a.<span class="hljs-property">radius</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>, !<span class="hljs-number">0</span>);<br>      ctx.<span class="hljs-property">fillStyle</span> = a.<span class="hljs-property">color</span>;<br>      ctx.<span class="hljs-title function_">fill</span>();<br>  &#125;;<br>  <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createCircle</span>(<span class="hljs-params">e, t, particleColors</span>) &#123;<br>    <span class="hljs-keyword">var</span> a = &#123;&#125;;<br>    a.<span class="hljs-property">x</span> = e;<br>    a.<span class="hljs-property">y</span> = t;<br>    a.<span class="hljs-property">radius</span> = <span class="hljs-number">0.1</span>;<br>    a.<span class="hljs-property">alpha</span> = <span class="hljs-number">0.5</span>;<br>    a.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">6</span>;<br>  <br>    <span class="hljs-comment">// 选择粒子颜色中数量最少的颜色</span><br>    <span class="hljs-keyword">var</span> colorCounts = &#123;&#125;;<br>    particleColors.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">color</span> =&gt;</span> &#123;<br>        colorCounts[color] = (colorCounts[color] || <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>;<br>    &#125;);<br>  <br>    <span class="hljs-keyword">var</span> minColor = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(colorCounts).<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> colorCounts[a] &lt; colorCounts[b] ? a : b);<br>  <br>    a.<span class="hljs-property">draw</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        ctx.<span class="hljs-property">globalAlpha</span> = a.<span class="hljs-property">alpha</span>;<br>        ctx.<span class="hljs-title function_">beginPath</span>();<br>        ctx.<span class="hljs-title function_">arc</span>(a.<span class="hljs-property">x</span>, a.<span class="hljs-property">y</span>, a.<span class="hljs-property">radius</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>, <span class="hljs-literal">true</span>);<br>        ctx.<span class="hljs-property">lineWidth</span> = a.<span class="hljs-property">lineWidth</span>;<br>        ctx.<span class="hljs-property">strokeStyle</span> = minColor; <span class="hljs-comment">// 使用数量最少的颜色</span><br>        ctx.<span class="hljs-title function_">stroke</span>();<br>        ctx.<span class="hljs-property">globalAlpha</span> = <span class="hljs-number">1</span>;<br>    &#125;;<br>    <span class="hljs-keyword">return</span> a;<br>  &#125;<br>  <br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">renderParticule</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> t = <span class="hljs-number">0</span>; t &lt; e.<span class="hljs-property">animatables</span>.<span class="hljs-property">length</span>; t++)<br>      e.<span class="hljs-property">animatables</span>[t].<span class="hljs-property">target</span>.<span class="hljs-title function_">draw</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">animateParticules</span>(<span class="hljs-params">e, t</span>) &#123;<br>  <span class="hljs-keyword">var</span> particleColors = [];<br>  <span class="hljs-keyword">var</span> n = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; numberOfParticules; i++) &#123;<br>      <span class="hljs-keyword">var</span> particule = <span class="hljs-title function_">createParticule</span>(e, t);<br>      n.<span class="hljs-title function_">push</span>(particule);<br>      particleColors.<span class="hljs-title function_">push</span>(particule.<span class="hljs-property">color</span>);<br>  &#125;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-title function_">createCircle</span>(e, t, particleColors);<br>  <br>  anime.<span class="hljs-title function_">timeline</span>().<span class="hljs-title function_">add</span>(&#123;<br>      <span class="hljs-attr">targets</span>: n,<br>      <span class="hljs-attr">x</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>          <span class="hljs-keyword">return</span> e.<span class="hljs-property">endPos</span>.<span class="hljs-property">x</span>;<br>      &#125;,<br>      <span class="hljs-attr">y</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>          <span class="hljs-keyword">return</span> e.<span class="hljs-property">endPos</span>.<span class="hljs-property">y</span>;<br>      &#125;,<br>      <span class="hljs-attr">radius</span>: <span class="hljs-number">.1</span>,<br>      <span class="hljs-attr">duration</span>: anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">1200</span>, <span class="hljs-number">1800</span>),<br>      <span class="hljs-attr">easing</span>: <span class="hljs-string">&quot;easeOutExpo&quot;</span>,<br>      <span class="hljs-attr">update</span>: renderParticule<br>  &#125;).<span class="hljs-title function_">add</span>(&#123;<br>      <span class="hljs-attr">targets</span>: a,<br>      <span class="hljs-attr">radius</span>: anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">80</span>, <span class="hljs-number">160</span>) * <span class="hljs-number">0.5</span>, <span class="hljs-comment">// 空心圆半径</span><br>      <span class="hljs-attr">lineWidth</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">alpha</span>: &#123;<br>          <span class="hljs-attr">value</span>: <span class="hljs-number">0</span>,<br>          <span class="hljs-attr">easing</span>: <span class="hljs-string">&quot;linear&quot;</span>,<br>          <span class="hljs-attr">duration</span>: anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">600</span>, <span class="hljs-number">800</span>)<br>      &#125;,<br>      <span class="hljs-attr">duration</span>: anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">1200</span>, <span class="hljs-number">1800</span>),<br>      <span class="hljs-attr">easing</span>: <span class="hljs-string">&quot;easeOutExpo&quot;</span>,<br>      <span class="hljs-attr">update</span>: renderParticule,<br>      <span class="hljs-attr">offset</span>: <span class="hljs-number">0</span><br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn, delay</span>) &#123;<br>  <span class="hljs-keyword">var</span> timer;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">var</span> context = <span class="hljs-variable language_">this</span>;<br>      <span class="hljs-keyword">var</span> args = <span class="hljs-variable language_">arguments</span>;<br>      <span class="hljs-built_in">clearTimeout</span>(timer);<br>      timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>          fn.<span class="hljs-title function_">apply</span>(context, args);<br>      &#125;, delay);<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">var</span> canvasEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.fireworks&quot;</span>);<br><span class="hljs-keyword">if</span> (canvasEl) &#123;<br>  <span class="hljs-keyword">var</span> ctx = canvasEl.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>),<br>      numberOfParticules = <span class="hljs-number">30</span>,<br>      pointerX = <span class="hljs-number">0</span>,<br>      pointerY = <span class="hljs-number">0</span>,<br>      tap = <span class="hljs-string">&quot;mousedown&quot;</span>,<br>      colors = [<span class="hljs-string">&quot;#FF1461&quot;</span>, <span class="hljs-string">&quot;#18FF92&quot;</span>, <span class="hljs-string">&quot;#5A87FF&quot;</span>, <span class="hljs-string">&quot;#FBF38C&quot;</span>],<br>      setCanvasSize = <span class="hljs-title function_">debounce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>          canvasEl.<span class="hljs-property">width</span> = <span class="hljs-number">2</span> * <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>,<br>          canvasEl.<span class="hljs-property">height</span> = <span class="hljs-number">2</span> * <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>,<br>          canvasEl.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> + <span class="hljs-string">&quot;px&quot;</span>,<br>          canvasEl.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span> + <span class="hljs-string">&quot;px&quot;</span>,<br>          canvasEl.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>).<span class="hljs-title function_">scale</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>      &#125;, <span class="hljs-number">500</span>),<br>      render = <span class="hljs-title function_">anime</span>(&#123;<br>          <span class="hljs-attr">duration</span>: <span class="hljs-number">1</span> / <span class="hljs-number">0</span>,<br>          <span class="hljs-attr">update</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>              ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvasEl.<span class="hljs-property">width</span>, canvasEl.<span class="hljs-property">height</span>);<br>          &#125;<br>      &#125;);<br><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(tap, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;sidebar&quot;</span> !== e.<span class="hljs-property">target</span>.<span class="hljs-property">id</span> &amp;&amp; <span class="hljs-string">&quot;toggle-sidebar&quot;</span> !== e.<span class="hljs-property">target</span>.<span class="hljs-property">id</span> &amp;&amp; <span class="hljs-string">&quot;A&quot;</span> !== e.<span class="hljs-property">target</span>.<span class="hljs-property">nodeName</span> &amp;&amp; <span class="hljs-string">&quot;IMG&quot;</span> !== e.<span class="hljs-property">target</span>.<span class="hljs-property">nodeName</span>) &#123;<br>          render.<span class="hljs-title function_">play</span>();<br>          <span class="hljs-title function_">updateCoords</span>(e);<br>          <span class="hljs-title function_">animateParticules</span>(pointerX, pointerY);<br>      &#125;<br>  &#125;, !<span class="hljs-number">1</span>),<br>  <span class="hljs-title function_">setCanvasSize</span>(),<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;resize&quot;</span>, setCanvasSize, !<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>修改完代码后在配置文件的 <code>csutom_js</code> 中引入两个 <code>js</code> 文件, 然后在  <code>custom_html</code> 处引入画布:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 鼠标点击特效 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fireworks&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position:fixed;left:0;top:0;z-index:99999999;pointer-events:none;&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果如下<br><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410031640155.gif"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>打字机颜色渐变 <a href="https://emoryhuang.cn/blog/1729600336.html#%E5%A4%B4%E9%83%A8%E6%89%93%E5%AD%97%E6%9C%BA%E9%A2%9C%E8%89%B2%E6%95%88%E6%9E%9C%E6%B8%90%E5%8F%98">https://emoryhuang.cn/blog/1729600336.html#%E5%A4%B4%E9%83%A8%E6%89%93%E5%AD%97%E6%9C%BA%E9%A2%9C%E8%89%B2%E6%95%88%E6%9E%9C%E6%B8%90%E5%8F%98</a></li><li>🌟博客园鼠标点击爆炸烟花特效 <a href="https://www.cnblogs.com/songhaixing/p/13754821.html">https://www.cnblogs.com/songhaixing/p/13754821.html</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+Fluid主题博客美化</title>
    <link href="/2024/10/02/Hexo-Fluid%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
    <url>/2024/10/02/Hexo-Fluid%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>搭建完了博客,第一步当然是对博客进行美化.简单记录一下我对自己博客的美化过程</p>          </div><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>对于博客配置的修改,若无特殊说明均在 <code>_config.fluid.yml</code> 文件内<br>对于资源的修改,均在博客<strong>根目录</strong>下 <code>source</code> 目录中,而不是 <code>fluid</code> 主题内部的 <code>source</code><br><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410021033228.png"></p><p>在根据 Fluid 配置文件的说明,在 <code>custom_js</code> 和 <code>custom_css</code> 中的文件路径相对 <code>source</code> 目录，如 <code>/js/custom.js</code> 对应存放目录 <code>source/js/custom.js</code> ,因此在 <code>source</code> 目录内添加 <code>js</code> 和 <code>css</code> 两个目录,按照如图所示的格式在配置文件中引入<br><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410022221494.png"></p><h1 id="页脚添加建站时间"><a href="#页脚添加建站时间" class="headerlink" title="页脚添加建站时间"></a>页脚添加建站时间</h1><p>在 <code>js</code> 目录下新建 <code>duration.js</code> 文件 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> startDate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2024-09-26T12:00:00&quot;</span>); <span class="hljs-comment">// 使用 ISO 格式的日期,在此处修改你网站的建立时间</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createTime</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-keyword">var</span> elapsed = now - startDate;<br><br>    <span class="hljs-keyword">var</span> days = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(elapsed / (<span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>));<br>    <span class="hljs-keyword">var</span> hours = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((elapsed % (<span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>)) / (<span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>));<br>    <span class="hljs-keyword">var</span> minutes = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((elapsed % (<span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>)) / (<span class="hljs-number">1000</span> * <span class="hljs-number">60</span>));<br>    <span class="hljs-keyword">var</span> seconds = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((elapsed % (<span class="hljs-number">1000</span> * <span class="hljs-number">60</span>)) / <span class="hljs-number">1000</span>);<br><br>    <span class="hljs-comment">// 格式化为两位数</span><br>    hours = <span class="hljs-title class_">String</span>(hours).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br>    minutes = <span class="hljs-title class_">String</span>(minutes).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br>    seconds = <span class="hljs-title class_">String</span>(seconds).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;timeDate&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;本站已在夹缝中生存 &quot;</span> + days + <span class="hljs-string">&quot; 天 &quot;</span>; <span class="hljs-comment">// 在这里修改你的建站时间文本</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;times&quot;</span>).<span class="hljs-property">innerHTML</span> = hours + <span class="hljs-string">&quot; 小时 &quot;</span> + minutes + <span class="hljs-string">&quot; 分 &quot;</span> + seconds + <span class="hljs-string">&quot; 秒&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 每 250 毫秒更新一次</span><br><span class="hljs-built_in">setInterval</span>(createTime, <span class="hljs-number">250</span>);<br></code></pre></td></tr></table></figure><p>在配置文件的 <code>footer</code> 处添加下面的内容:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 博客上线天数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;timeDate&quot;</span>&gt;</span>载入天数...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;times&quot;</span>&gt;</span>载入时分秒...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/duration.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后就编译运行就可以看到效果了<br><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410022233001.png"></p><h1 id="添加一言功能"><a href="#添加一言功能" class="headerlink" title="添加一言功能"></a>添加一言功能</h1><p>如果时想在页脚添加,参照<a href="https://developer.hitokoto.cn/sentence/demo.html">一言官方文档</a>给出的示例,只需要直接在 <code>footer</code> 下添加以下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;statistics&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://developer.hitokoto.cn/&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hitokoto_text&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hitokoto&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://v1.hitokoto.cn/?c=h&amp;c=i&amp;c=k&amp;encode=js&amp;select=%23hitokoto&quot;</span> <span class="hljs-attr">defer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当然,也可以用一言替代博客Slogan(首页标题文字)的随机语句,这在 <a href="https://hexo.fluid-dev.com/docs/guide/#slogan-%E6%89%93%E5%AD%97%E6%9C%BA">Fluid的官方文档</a>中有给出示例,仅需将 <code>api</code> 条目下的 <code>false</code> 改为 <code>true</code> 即可</p><h1 id="标签恶搞"><a href="#标签恶搞" class="headerlink" title="标签恶搞"></a>标签恶搞</h1><p>在离开页面时标签页显示崩溃或其他文本的恶搞功能,直接照搬 <a href="https://asteri5m.icu/archives/0c8538e7-5b5f-4897-8e8b-0cff84320473">Asteri5m</a>博客中给出的代码<br>在 <code>custom_js</code> 中引入以下 <code>js</code> 代码文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 浏览器搞笑标题</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">OriginTitle</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span>;<br><span class="hljs-keyword">var</span> titleTime;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;visibilitychange&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">hidden</span>) &#123;<br>$(<span class="hljs-string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;href&#x27;</span>, <span class="hljs-string">&quot;/funny.ico&quot;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;╭(°A°`)╮ 页面崩溃啦 ~&#x27;</span>;<br><span class="hljs-built_in">clearTimeout</span>(titleTime);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>$(<span class="hljs-string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;href&#x27;</span>, <span class="hljs-string">&quot;/img/newtubiao.png&quot;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;(ฅ&gt;ω&lt;*ฅ) 噫又好啦 ~&#x27;</span> + <span class="hljs-title class_">OriginTitle</span>;<br>titleTime = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-title class_">OriginTitle</span>;<br>&#125;, <span class="hljs-number">2000</span>);<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>Fluid官方文档 <a href="https://hexo.fluid-dev.com/docs/guide/">https://hexo.fluid-dev.com/docs/guide/</a></li><li>Asteri5m博客 <a href="https://asteri5m.icu/archives/0c8538e7-5b5f-4897-8e8b-0cff84320473">https://asteri5m.icu/archives/0c8538e7-5b5f-4897-8e8b-0cff84320473</a></li><li>一言开发者中心 <a href="https://developer.hitokoto.cn/sentence/">https://developer.hitokoto.cn/sentence/</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo + Fluid博客搭建</title>
    <link href="/2024/10/01/hexo-fluid%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/10/01/hexo-fluid%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>作为一个学计算机的人,不做个人博客就像四大名著不看红楼梦……<br>简单的折腾几天也是终于把样子搭好了!下面简单记录一下搭建的过程.</p>          </div><h1 id="1-hexo-的本地环境搭建"><a href="#1-hexo-的本地环境搭建" class="headerlink" title="1. hexo 的本地环境搭建"></a>1. hexo 的本地环境搭建</h1><p>hexo本地环境需要<code>Nodejs</code>和<code>git</code>,<code>nodejs</code>作用是在本地编译,<code>git</code>是将编译完成的文件上传到仓库,由于我很早就完成了安装,且网上教程很多,此处不再赘述.</p><p>(1) 在需要的环境配置完成后,使用npm安装heox</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>(2) 在命令行中选择一个文件夹进行初始化.下面的命令会在当前目录中创建一个blog的文件夹,并在其中配置相关依赖</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> blog<br></code></pre></td></tr></table></figure><p>(3) 进入文件夹并安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> blog<br>npm i<br></code></pre></td></tr></table></figure><p>等待安装完成后,blog中会出现如下文件:<br>![alt text]<img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/20241001202737.png"></p><p>(4) 直接使用hexo提供的命令就能在本地看到博客的界面了</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>![alt text]<img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410012030784.png"></p><h1 id="2-在服务器部署-Debain"><a href="#2-在服务器部署-Debain" class="headerlink" title="2. 在服务器部署(Debain)"></a>2. 在服务器部署(Debain)</h1><blockquote><p>Debain的包管理工具为apt, 若使用的是其他Linux发行版,只要把安装的指令切换成对应发行版的包管理工具即可,流程是相同的</p></blockquote><h2 id="1-在服务器的控制台中修改策略组-开放以下端口"><a href="#1-在服务器的控制台中修改策略组-开放以下端口" class="headerlink" title="(1) 在服务器的控制台中修改策略组,开放以下端口"></a>(1) 在服务器的控制台中修改策略组,开放以下端口</h2><p>22: 用于 git 的远程连接,在执行<code>hexo delpoy</code>部署时需要用到<br>80: http 连接使用的端口<br>443: https 连接使用的端口</p><h2 id="2-配置-Nginx"><a href="#2-配置-Nginx" class="headerlink" title="(2) 配置 Nginx"></a>(2) 配置 Nginx</h2><p>安装 nginx:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt <span class="hljs-keyword">install</span> nginx<br></code></pre></td></tr></table></figure><p>启动 nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl start nginx<br></code></pre></td></tr></table></figure><p>创建一个证书存储目录,并将证书相关文件将证书文件(<code>.pem</code>以及<code>.key</code>文件)添加进去:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/conf.d/</span>cert<br></code></pre></td></tr></table></figure><p>先建立一个hexo工作目录,此目录为博客推送后实际存储的位置(根目录):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /var/www/hexo<br></code></pre></td></tr></table></figure><p>![alt text]<img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410012031287.png"></p><p>配置 nginx 路由</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vi</span> /etc/nginx/<span class="hljs-keyword">conf</span>.d/blog.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><p>输入以下内容:<br>其中<code>server_name</code>可填写域名,若无则填写服务器的公网ip</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> default_server;<br>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span> default_server;<br>    <span class="hljs-attribute">server_name</span> blog.xxx.com; <br><br>    <span class="hljs-comment"># 强制重定向所有 HTTP 请求到 HTTPS</span><br>    <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;<br>    <span class="hljs-attribute">server_name</span> blog.xxx.com;<br><br>    <span class="hljs-comment"># 修改为正确的证书文件路径</span><br>    <span class="hljs-attribute">ssl_certificate</span> /etc/nginx/conf.d/cert/blog.emb42.com_bundle.pem;<br>    <span class="hljs-attribute">ssl_certificate_key</span> /etc/nginx/conf.d/cert/blog.emb42.com.key;<br><br>    <span class="hljs-attribute">ssl_session_cache</span> shared:SSL:<span class="hljs-number">1m</span>;<br>    <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">5m</span>;<br><br>    <span class="hljs-attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<br>    <span class="hljs-attribute">ssl_protocols</span> TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;<br><br>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-attribute">root</span> /var/www/hexo; <span class="hljs-comment"># 博客存储的根目录</span><br>    <span class="hljs-attribute">index</span> index.html;  <span class="hljs-comment"># 默认首页文件</span><br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.html;  <span class="hljs-comment"># 处理请求</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>检查语法并重新加载 nginx</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nginx -t</span><br><span class="hljs-attribute">nginx -s reload</span><br></code></pre></td></tr></table></figure><h2 id="3-安装-Nodejs"><a href="#3-安装-Nodejs" class="headerlink" title="(3) 安装 Nodejs"></a>(3) 安装 Nodejs</h2><p>依次执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://deb.nodesource.com/setup_18.x | <span class="hljs-built_in">sudo</span> -E bash -<br><span class="hljs-built_in">sudo</span> apt install -y nodejs<br></code></pre></td></tr></table></figure><p>查看安装结果，打印对应版本号则安装成功</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>npm -v<br></code></pre></td></tr></table></figure><h2 id="4-Git服务器配置"><a href="#4-Git服务器配置" class="headerlink" title="(4) Git服务器配置"></a>(4) Git服务器配置</h2><h3 id="修改git用户权限"><a href="#修改git用户权限" class="headerlink" title="修改git用户权限"></a>修改git用户权限</h3><p>安装 git:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt <span class="hljs-keyword">install</span> git <br></code></pre></td></tr></table></figure><p>添加 git 用户:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">adduser git</span><br></code></pre></td></tr></table></figure><p>修改用户权限:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 740 /etc/sudoers<br></code></pre></td></tr></table></figure><p>编辑<code>/etc/sudoers</code>,添加<code>git ALL=(ALL) ALL</code>,修改git用户权限:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>sudoers<br></code></pre></td></tr></table></figure><p>先按<code>i</code>进入编辑模式,添加语句<br>![alt text]<img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410012031908.png"><br>按<code>esc</code>然后输入<code>:wq</code>保存退出.<br>设置 git 用户密码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> passwd git<br></code></pre></td></tr></table></figure><p>Linux中输入密码时是不显示<code>***</code>样式的,正常输入即可</p><h3 id="配置-ssh-连接"><a href="#配置-ssh-连接" class="headerlink" title="配置 ssh 连接"></a>配置 ssh 连接</h3><blockquote><p>目的是以后使用<code>hexo deploy</code>部署时不用每次都输入密码</p></blockquote><p>切换至<code>git</code>用户,在<code>~</code>目录下创建.ssh文件夹</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">su git<br><span class="hljs-keyword">cd</span> ~<br>mkdir <span class="hljs-string">.ssh</span><br><span class="hljs-keyword">cd</span> <span class="hljs-string">.ssh</span><br></code></pre></td></tr></table></figure><p>创建公钥,执行命令后无需输入,只要按回车即可<br><code>.ssh</code>文件下会生成一个<code>authorized_keys</code>的文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410012032052.png"><br>修改其权限:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 600 ~/.ssh/authorized_keys<br><span class="hljs-built_in">chmod</span> 700 ~/.ssh<br></code></pre></td></tr></table></figure><p>将本地电脑上的公钥<code>id_rsa.pub</code>文件中的内容添加至<code>authorized_keys</code>中<br>后,在本地命令给中尝试与服务器进行 ssh 连接,无报错且成功显示服务器的bash则成功</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh -v <span class="hljs-symbol">git@</span>服务器ip<br></code></pre></td></tr></table></figure><p>![alt text]<img src="https://blog-1318796820.cos.ap-shanghai.myqcloud.com/blog/202410012032956.png"></p><h3 id="创建服务器-Git-仓库"><a href="#创建服务器-Git-仓库" class="headerlink" title="创建服务器 Git 仓库"></a>创建服务器 Git 仓库</h3><p>建立一个repo目录并初始化<code>blog.git</code>仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /var/repo <br>git init --bare /var/repo/blog.git<br></code></pre></td></tr></table></figure><p>创建并编辑 post-receice</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/var/</span>repo<span class="hljs-regexp">/blog.git/</span>hooks/post-receive<br></code></pre></td></tr></table></figure><p>添加以下内容,其功能为在blog.git接收到推送时强制将推送的内容部署到<code>/var/www/hexo</code>目录下:<br>(tips:也就是说如果推送了但网站没有更新,可以在服务器中手动执行此命令以部署):</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy">git --work-tree=<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/hexo --git-dir=/</span><span class="hljs-keyword">var</span><span class="hljs-regexp">/repo/</span>blog.git checkout -f<br></code></pre></td></tr></table></figure><p>保存退出并添加可执行权限:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">chmod +x <span class="hljs-regexp">/var/</span>repo<span class="hljs-regexp">/blog.git/</span>hooks/post-receive<br></code></pre></td></tr></table></figure><p>为仓库添加权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> -R git:git /var/repo     <span class="hljs-comment">#将仓库目录的所有权移交给git用户</span><br><span class="hljs-built_in">chown</span> -R git:git /var/www/hexo     <span class="hljs-comment">#将hexo部署目录的所有权移交给git用户</span><br></code></pre></td></tr></table></figure><h1 id="3-在本地配置服务器信息"><a href="#3-在本地配置服务器信息" class="headerlink" title="3. 在本地配置服务器信息"></a>3. 在本地配置服务器信息</h1><p>打开bolg文件目录中的配置文件<code>config.yml</code>,在最下面的<code>deploy</code>中修改配置信息,其中<code>repo</code>若无域名则以ip替代,<code>:</code>后填写服务器下git目录的位置:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@blog.xxx.com:<span class="hljs-keyword">/var/</span>repo/blog.git<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>完成后用命令行在本地博客的根目录位置执行部署命令,应该能在服务器&#x2F;var&#x2F;www&#x2F;hexo目录中看到相应的内容,并且访问服务器可以看到博客界面了</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><h1 id="4-修改-Hexo-主题"><a href="#4-修改-Hexo-主题" class="headerlink" title="4. 修改 Hexo 主题"></a>4. 修改 Hexo 主题</h1><h2 id="安装Fluid主题"><a href="#安装Fluid主题" class="headerlink" title="安装Fluid主题"></a>安装Fluid主题</h2><p>进入博客目录执行</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 _config.fluid.yml，将Fluid主题的 _config.yml (opens new window)内容复制过去</p><h2 id="指定主题"><a href="#指定主题" class="headerlink" title="指定主题"></a>指定主题</h2><p>修改本地_config.yml中的配置:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN  <span class="hljs-meta"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><h2 id="创建关于页"><a href="#创建关于页" class="headerlink" title="创建关于页"></a>创建关于页</h2><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> page about<br></code></pre></td></tr></table></figure><p>创建成功后修改 &#x2F;source&#x2F;about&#x2F;index.md，添加 layout 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure><p>完成后执行 hexo 命令本地检查是否切换成功:</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo cl <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo s<br></code></pre></td></tr></table></figure><p>主题成功切换后部署至服务器</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>Fluid官方文档 <a href="https://fluid-dev.github.io/hexo-fluid-docs/start/">https://fluid-dev.github.io/hexo-fluid-docs/start/</a></li><li>Hexo官方文档 <a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo">https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo</a></li><li>博客部署教程 <a href="https://developer.aliyun.com/article/815625">https://developer.aliyun.com/article/815625</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
